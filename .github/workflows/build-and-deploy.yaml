name: CI/CD pipeline to upload and run on DigitalOcean

on:
  push:
    branches: ['*']
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: x64

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs/*.jar

  package-and-upload:
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - uses: actions/checkout@v4

      - name: Download .jar
        uses: actions/download-artifact@master
        with:
          name: Package

      - name: Build and push
        run: |
          docker build -t ${{ secrets.REGISTRY_URL }}/telegram-bot:latest .
          docker push ${{ secrets.REGISTRY_URL }}/telegram-bot:latest

  deploy:
    needs: package-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VIRTUAL_MACHINE_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            container_id=$(docker ps --format "{{.ID}} {{.Names}}" | grep "telegram-bot" | awk '{print $1}')

            if [ ! -z "$container_id" ]; then
              docker stop "$container_id"
              docker rm "$container_id"
            fi

            docker pull ${{ secrets.REGISTRY_URL }}/telegram-bot:latest
            docker run --name telegram-bot -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} -d ${{ secrets.REGISTRY_URL }}/telegram-bot:latest